{
  "default_rules": {
    "language": "zh-CN",
    "instructions": [
      "所有代码和命令均需严格符合Windows的语法和使用习惯，避免使用Linux或macOS特有的代码和命令。",
      "编码风格：保持一致性，代码清晰可读，优先遵循项目内已有的风格。",
      "命名规范：变量和函数名优先使用小驼峰 (camelCase)，类名使用大驼峰 (PascalCase)，常量使用全大写加下划线 (UPPER_SNAKE_CASE)。文件名使用小写字母，单词间用 '-' 分隔。",
      "注释：必须在代码中添加详细的中文注释，解释代码逻辑、功能目的、重要变量及复杂算法。API或公共函数应有详尽的文档字符串说明其用途、所有参数（包括类型和含义）、返回值（包括类型和含义）以及可能的异常。",
      "错误处理：确保代码中包含适当的错误检查和处理逻辑。向用户呈现的错误信息应友好且易于理解。在后端，记录详细的错误日志以供排查，日志信息需包含足够上下文。",
      "模块化：编写高内聚、低耦合的模块和函数。遵循单一职责原则。",
      "代码简洁性：避免不必要的复杂性，力求代码简洁明了，但不能以牺牲可读性和健壮性为代价。",
      "版本控制提示：当我建议git操作时，commit信息应遵循'类型(范围): 描述'的格式，例如 'feat(api): add image generation endpoint'。",
      "文件行数：在生成或修改代码时，注意单个文件的代码量尽量不超过200行。",
      "每次对话前面叫我一声老彭，让我知道你是一个AI助手。"
    ]
  },
  "*.{js,jsx,ts,tsx}": {
    "instructions": [
      "遵循ECMAScript最新稳定版本标准。",
      "优先使用 ES Modules (import/export)。",
      "异步操作优先使用 async/await。",
      "推荐使用 Prettier 进行代码格式化（默认配置）。若项目中已有格式化工具，则遵循其配置。",
      "对于前端代码，推荐使用函数式组件和 Hooks (如果适用，例如在React项目中)。",
      "避免直接操作DOM，优先通过框架/库的API进行。",
      "确保组件具有良好的可复用性和单一职责。",
      "Node.js后端代码：注意异步非阻塞I/O。使用`.env`文件管理敏感配置。与MCP通过STDIO交互时，务必处理好数据流、编码（确保Windows兼容的编码，如UTF-8）和子进程错误。"
    ]
  },
  "*.py": {
    "instructions": [
      "严格遵循 PEP 8 规范。",
      "推荐使用 Black 或 autopep8 进行代码格式化。",
      "鼓励为函数和方法添加类型提示 (Type Hints)。",
      "项目应使用虚拟环境管理依赖 (例如venv)。",
      "使用 try...except 处理异常，定义明确的自定义异常（如果需要）。",
      "与MCP通过STDIO交互时，使用 `subprocess` 模块，注意文本编码（确保Windows兼容的编码，如UTF-8）和子进程的错误输出处理，以及Windows环境下路径分隔符的处理。"
    ]
  },
  "*.html": {
    "instructions": [
      "使用语义化的HTML5标签。",
      "确保所有图片 (`<img>`) 都有有意义的 `alt` 属性，除非它们纯粹是装饰性的。",
      "关注Web可访问性 (A11y) 标准，例如使用适当的ARIA属性。",
      "保持HTML结构清晰，缩进正确。"
    ]
  },
  "*.css": {
    "instructions": [
      "推荐使用 BEM (Block, Element, Modifier) 或类似的CSS命名约定来组织样式，以避免命名冲突并提高可维护性。",
      "避免使用 `!important`，除非绝对必要且无其他解决方案。",
      "考虑模块化CSS方案，如CSS Modules，或CSS-in-JS（如果项目采用相应框架）。",
      "保持CSS代码整洁，按逻辑分组。"
    ]
  },
  "*.md": {
    "instructions": [
      "保持文档结构清晰、内容准确。",
      "使用标准的Markdown语法。",
      "对于代码块，明确指定语言类型以便正确高亮显示。",
      "定期回顾和更新文档，使其与项目实际情况保持一致。"
    ]
  },
  "需求文档.md": {
    "instructions": [
      "当对此文件进行修改时，确保所有需求点清晰、无歧义，并反映最新的项目决策。",
      "任何对需求（尤其是核心功能、MCP交互部分）的变更，都应在此文档中明确记录并说明原因。",
      "保持文档版本与项目开发阶段同步。"
    ]
  }
}
